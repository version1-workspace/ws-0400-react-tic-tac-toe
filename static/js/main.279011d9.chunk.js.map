{"version":3,"sources":["GlobalStyle.js","components/Board.js","components/Turn.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","RowContainer","Cell","Row","board","index","onClick","Array","fill","map","_","colIndex","_index","key","Board","TurnElement","isTurn","Turn","turns","turn","item","Header","Title","h1","Content","Footer","Button","a","StatusText","CHAR","Object","freeze","circle","crosse","STATUS_TEXT","processing","win","draw","initialState","winner","statusText","handCount","isCircleTurn","checkRow","value","baseIndex","i","checkCol","cursor","checkDiagonal","includes","every","App","props","onRestart","setState","state","newBoard","some","cb","checkWinner","checkDraw","this","values","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.279011d9.chunk.js","sourcesContent":["import React from 'react';\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n html {\n    font-family: 'Lato', 'Lucida Grande', 'Lucida Sans Unicode', Tahoma, Sans-Serif;\n    line-height: 1.5;\n    font-size: 15px;\n    font-weight: 400:\n  }\n\n  body {\n    padding: 0;\n    margin: 0;\n  }\n\n  *, *:before, *:after {\n    box-sizing: border-box;\n  }\n\n  h1 {\n    font-size: 1.2rem;\n  }\n`\n\n\nexport default () => <GlobalStyle />;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  border: 1px solid black;\n`;\n\nconst RowContainer = styled.div`\n  display: flex;\n  border-bottom: 1px solid black;\n  &:last-child {\n    border-bottom: 0;\n  }\n`;\nconst Cell = styled.div`\n  width: 3rem;\n  height: 3rem;\n  font-size: 2rem;\n  text-align: center;\n  border-right: 1px solid black;\n  &:hover {\n    cursor: pointer;\n  }\n  &:last-child {\n    border-right: 0;\n  }\n`;\n\nconst Row = ({board, index, onClick}) => {\n  return (\n    <RowContainer>\n      {new Array(3).fill('').map((_, colIndex) => {\n        const _index = 3 * (index - 1) + colIndex;\n        const _onClick = () => onClick(_index)\n        return <Cell key={_index} onClick={_onClick}>{board[_index]}</Cell>;\n      })}\n    </RowContainer>\n  );\n};\n\nconst Board = ({board, onClick}) => {\n  return (\n    <Container>\n      <Row board={board} index={1} onClick={onClick}/>\n      <Row board={board} index={2} onClick={onClick}/>\n      <Row board={board} index={3} onClick={onClick}/>\n    </Container>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst TurnElement = styled.div`\n  padding: 8px 16px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border-bottom: ${({isTurn}) => (isTurn ? '3px solid black' : '0')};\n`;\n\nconst Turn = ({turns, turn}) => {\n  return (\n    <Container>\n      {turns.map(item => {\n        const isTurn = item === turn;\n        return (\n          <TurnElement key={item} isTurn={isTurn}>\n            {item}\n          </TurnElement>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Turn;\n","import React from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from './GlobalStyle';\nimport Board from './components/Board';\nimport Turn from './components/Turn';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nconst Header = styled.div`\n  padding: 16px;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Content = styled.div``;\n\nconst Footer = styled.div`\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Button = styled.a`\n  display: inline-block;\n  text-align: center;\n  font-weight: bold;\n  border: 3px solid black;\n  border-radius: 6px;\n  font-weight: bold;\n  padding: 4px 16px;\n  &:hover {\n    background: black;\n    color: white;\n    cursor: pointer;\n  }\n`;\n\nconst StatusText = styled.div`\n  text-align: center;\n  padding: 8px;\n`;\n\nconst CHAR = Object.freeze({\n  circle: '○',\n  crosse: '×',\n});\n\nconst STATUS_TEXT = Object.freeze({\n  processing: 'processing',\n  win: 'win',\n  draw: 'draw',\n});\n\nconst initialState = {\n  winner: null,\n  turn: CHAR.circle,\n  processing: true,\n  statusText: STATUS_TEXT.processing,\n  handCount: 0,\n  isCircleTurn: true,\n  board: new Array(9),\n};\n\nconst checkRow = (board, value, index) => {\n  let baseIndex = index - (index % 3);\n  for (let i = baseIndex; i < baseIndex + 3; i++) {\n    if (board[i] !== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkCol = (board, value, index) => {\n  let cursor = index;\n  for (let i = 0; i < 3; i++) {\n    if (board[cursor] !== value) {\n      return false;\n    }\n    cursor = (cursor + 3) % 9;\n  }\n  return true;\n};\n\nconst checkDiagonal = (board, value, index) => {\n  if (![0, 2, 4, 6, 8].includes(index)) {\n    return false;\n  }\n  return (\n    [0, 4, 8].every(item => board[item] === value) ||\n    [2, 4, 6].every(item => board[item] === value)\n  );\n};\n\nconst checkWinner = (board, value, index) => {\n  return [checkRow, checkCol, checkDiagonal].some(cb =>\n    cb(board, value, index),\n  );\n};\n\nconst checkDraw = board => {\n  return board.every(item => item);\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {...initialState};\n  }\n\n  onRestart = () => {\n    this.setState({...initialState});\n  };\n\n  onClick = index => {\n    const {board, handCount, processing, turn} = this.state;\n    if (board[index] || !processing) {\n      return;\n    }\n    const newBoard = [...board];\n    newBoard[index] = turn;\n    this.setState({\n      board: newBoard,\n      handCount,\n      turn: turn === CHAR.circle ? CHAR.crosse : CHAR.circle,\n    });\n\n    if (checkWinner(newBoard, turn, index)) {\n      this.setState({\n        processing: false,\n        winner: turn,\n        statusText: turn + ' ' + STATUS_TEXT.win,\n      });\n      return;\n    }\n\n    if (checkDraw(newBoard)) {\n      this.setState({\n        processing: false,\n        statusText: STATUS_TEXT.draw,\n      });\n      return;\n    }\n  };\n\n  render() {\n    const {turn, board, statusText} = this.state;\n\n    return (\n      <Container>\n        <Content>\n          <GlobalStyle />\n          <Header>\n            <Title>Tic Tac Toe</Title>\n            <Turn turns={Object.values(CHAR)} turn={turn} />\n          </Header>\n          <Board board={board} onClick={this.onClick} />\n          <Footer>\n            <StatusText>{statusText}</StatusText>\n            <Button onClick={this.onRestart}>Restart</Button>\n          </Footer>\n        </Content>\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}